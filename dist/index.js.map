{"version":3,"sources":["../src/providers/tokenProvider.ts","../src/actions/tokenAction.ts","../src/evaluators/tokenEvaluator.ts","../src/actions/trendsAction.ts","../src/actions/index.ts","../src/evaluators/index.ts","../src/providers/index.ts","../src/index.ts"],"sourcesContent":["import type { Provider, IAgentRuntime, Memory, State } from \"@elizaos/core\";\r\n\r\ninterface DexScreenerPair {\r\n    baseToken: {\r\n        name: string;\r\n        symbol: string;\r\n        address: string;\r\n        decimals: number;\r\n    };\r\n    priceUsd: string;\r\n    liquidity?: {\r\n        usd: string;\r\n    };\r\n    volume?: {\r\n        h24: number;\r\n    };\r\n}\r\n\r\nexport class TokenPriceProvider implements Provider {\r\n    async get(\r\n        _lengthruntime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State\r\n    ): Promise<string> {\r\n        try {\r\n            const content =\r\n                typeof message.content === \"string\"\r\n                    ? message.content\r\n                    : message.content?.text;\r\n\r\n            if (!content) {\r\n                throw new Error(\"No message content provided\");\r\n            }\r\n\r\n            // Extract token from content\r\n            const tokenIdentifier = this.extractToken(content);\r\n            if (!tokenIdentifier) {\r\n                // throw new Error(\"Could not identify token in message\");\r\n                return\r\n            }\r\n\r\n            console.log(`Fetching price for token: ${tokenIdentifier}`);\r\n\r\n            // Make API request\r\n            const isAddress =\r\n                /^0x[a-fA-F0-9]{40}$/.test(tokenIdentifier) ||\r\n                /^[1-9A-HJ-NP-Za-km-z]{43,44}$/.test(tokenIdentifier); // validates for ethAddress and solAddress\r\n            const endpoint = isAddress\r\n                ? `https://api.dexscreener.com/latest/dex/tokens/${tokenIdentifier}`\r\n                : `https://api.dexscreener.com/latest/dex/search?q=${tokenIdentifier}`;\r\n\r\n            const response = await fetch(endpoint);\r\n            if (!response.ok) {\r\n                throw new Error(`API request failed: ${response.statusText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            if (!data.pairs || data.pairs.length === 0) {\r\n                throw new Error(`No pricing data found for ${tokenIdentifier}`);\r\n            }\r\n\r\n            // Get best pair by liquidity\r\n            const bestPair = this.getBestPair(data.pairs);\r\n            return this.formatPriceData(bestPair);\r\n        } catch (error) {\r\n            console.error(\"TokenPriceProvider error:\", error);\r\n            return `Error: ${error.message}`;\r\n        }\r\n    }\r\n\r\n    private extractToken(content: string): string | null {\r\n        // Try different patterns in order of specificity\r\n        const patterns = [\r\n            /0x[a-fA-F0-9]{40}/, // ETH address\r\n            /[$#]([a-zA-Z0-9]+)/, // $TOKEN or #TOKEN\r\n            /(?:price|value|worth|cost)\\s+(?:of|for)\\s+([a-zA-Z0-9]+)/i, // \"price of TOKEN\"\r\n            /(?:цена|стоимость|стоит)\\s+([a-zA-Z0-9]+)/i, //цена\r\n            /\\b(?:of|for)\\s+([a-zA-Z0-9]+)\\b/i, // \"of TOKEN\"\r\n        ];\r\n\r\n        for (const pattern of patterns) {\r\n            const match = content.match(pattern);\r\n            if (match) {\r\n                // Use captured group if it exists, otherwise use full match\r\n                const token = match[1] || match[0];\r\n                // Clean up the token identifier\r\n                return token.replace(/[$#]/g, \"\").toLowerCase().trim();\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private getBestPair(pairs: DexScreenerPair[]): DexScreenerPair {\r\n        return pairs.reduce((best, current) => {\r\n            const bestLiquidity = Number.parseFloat(best.liquidity?.usd || \"0\");\r\n            const currentLiquidity = Number.parseFloat(current.liquidity?.usd || \"0\");\r\n            return currentLiquidity > bestLiquidity ? current : best;\r\n        }, pairs[0]);\r\n    }\r\n\r\n    private formatPriceData(pair: DexScreenerPair): string {\r\n        const price = Number.parseFloat(pair.priceUsd).toFixed(6);\r\n        const liquidity = Number.parseFloat(\r\n            pair.liquidity?.usd || \"0\"\r\n        ).toLocaleString();\r\n        const volume = (pair.volume?.h24 || 0).toLocaleString();\r\n\r\n        return `\r\n        ${pair.baseToken.symbol} стоит $${price}\\nЛиквидность: $${liquidity}\\nОбъем за сутки: $${volume}.`;\r\n    }\r\n}\r\n\r\nexport const tokenPriceProvider = new TokenPriceProvider();\r\n","import type { Action, IAgentRuntime, Memory, State, HandlerCallback } from \"@elizaos/core\";\r\nimport { TokenPriceProvider } from \"../providers/tokenProvider\";\r\n\r\nexport const priceTemplate = `Определите, является ли это запросом на цену токена. Если это один из указанных случаев, выполните соответствующее действие:\r\n\r\nСитуация 1: \"Получить цену токена\"\r\n- Сообщение содержит: слова вроде \"цена\", \"стоимость\", \"ценность\", \"сколько стоит\" И символ/адрес токена\r\n- Пример: \"Сколько стоит ETH?\", \"Сколько стоит 0xfbd2bc331233f9747d5aa57b0cdf8e0289ca4444?\" или \"Какова цена BTC?\"\r\n- Действие: Получить текущую цену токена\r\n\r\nПредыдущий диалог для контекста:\r\n{{conversation}}\r\n\r\nВы отвечаете на сообщение: {{message}}\r\n`;\r\n\r\nexport class TokenPriceAction implements Action {\r\n    name = \"GET_TOKEN_PRICE\";\r\n    similes = [\"FETCH_TOKEN_PRICE\", \"CHECK_TOKEN_PRICE\", \"TOKEN_PRICE\"];\r\n    description = \"Fetches and returns token price information\";\r\n    suppressInitialMessage = true;\r\n    template = priceTemplate;\r\n\r\n    async validate(_runtime: IAgentRuntime, message: Memory): Promise<boolean> {\r\n        const content = typeof message.content === 'string'\r\n            ? message.content\r\n            : message.content?.text;\r\n\r\n        if (!content) return false;\r\n\r\n        const hasPriceKeyword = /\\b(price|value|worth|cost)\\b/i.test(content) || /(цен.|стоимость|стоит.)/i.test(content);;\r\n        const hasToken = (\r\n            /0x[a-fA-F0-9]{40}/.test(content) ||\r\n            /[$#]?[a-zA-Z0-9]+/i.test(content)\r\n        );\r\n\r\n        return hasPriceKeyword && hasToken;\r\n    }\r\n\r\n    async handler(\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state?: State,\r\n        _options: { [key: string]: unknown } = {},\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> {\r\n        try {\r\n            // Get the provider\r\n            const provider = runtime.providers.find(p => p instanceof TokenPriceProvider);\r\n            if (!provider) {\r\n                throw new Error(\"Token price provider not found\");\r\n            }\r\n\r\n            // Get price data\r\n            console.log(\"Fetching price data...\");\r\n            const priceData = await provider.get(runtime, message, state);\r\n            console.log(\"Received price data:\", priceData);\r\n\r\n            if (priceData.includes(\"Error\")) {\r\n                throw new Error(priceData);\r\n            }\r\n\r\n            // If we have a callback, use it to send the response\r\n            if (callback) {\r\n                await callback({\r\n                    text: priceData,\r\n                    action: this.name\r\n                });\r\n            }\r\n\r\n            // Set the response in state to prevent further processing\r\n            if (state) {\r\n                state.responseData = {\r\n                    text: priceData,\r\n                    action: this.name\r\n                };\r\n            }\r\n\r\n            return true;\r\n\r\n        } catch (error) {\r\n            console.error(\"Error in price action handler:\", error);\r\n\r\n            if (callback) {\r\n                await callback({\r\n                    text: `Sorry, I couldn't fetch the token price: ${error.message}`,\r\n                    action: this.name\r\n                });\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n     examples = [\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"check price of eth\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent}}\",\r\n        content: {\r\n          text: \"ETH: $2 345,67 (+5,43% за 24ч)\\n Объём $9,87B \\n Ликвидность $1,23B.\",\r\n          action: \"GET_TOKEN_PRICE\"\r\n        }\r\n      }\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"цена eth\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent1}}\",\r\n        content: {\r\n          text: \"ETH: $2 345,67 (+5,43% за 24ч)\\n Объём $9,87B \\n Ликвидность $1,23B.\",\r\n          action: \"GET_TOKEN_PRICE\"\r\n        }\r\n      }\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"Сколько сечас стоит BTC?\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent}}\",\r\n        content: {\r\n          text: \"BTC: $42 567,89 (+2,15% за 24ч) \\n Объём: $25,87B \\n Ликвидность: $15,23B.\",\r\n          action: \"GET_TOKEN_PRICE\"\r\n        }\r\n      }\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"what's the current value of $bnb\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent}}\",\r\n        content: {\r\n          text: \"Binance Coin (BNB) is priced at $345.67 with $5.23B in liquidity. The trading volume over the last 24h is $1.87B, and the price has decreased by 1.23% during this period.\",\r\n          action: \"GET_TOKEN_PRICE\"\r\n        }\r\n      }\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"can you tell me the price for USDT?\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent}}\",\r\n        content: {\r\n          text: \"Tether (USDT) is maintaining its peg at $1.00 with minimal change (+0.01%). The token has $25.23B in liquidity and has seen $45.87B in trading volume over the past 24 hours.\",\r\n          action: \"GET_TOKEN_PRICE\"\r\n        }\r\n      }\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"show me the cost of #SOL\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent}}\",\r\n        content: {\r\n          text: \"Solana (SOL) is trading at $123.45, showing strong momentum with an 8.75% increase in the last 24 hours. The liquidity stands at $3.23B with a 24h trading volume of $987.54M.\",\r\n          action: \"GET_TOKEN_PRICE\"\r\n        }\r\n      }\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0 цена\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent}}\",\r\n        content: {\r\n          text: \"The price of Polygon (MATIC) is currently $1.23, up 3.45% in the past 24 hours. The token has $2.23B in liquidity and has seen $567.54M in trading volume today.\",\r\n          action: \"GET_TOKEN_PRICE\"\r\n        }\r\n      }\r\n    ]\r\n  ];\r\n}\r\n\r\nexport const tokenPriceAction = new TokenPriceAction();","import type { Evaluator, IAgentRuntime, Memory, State } from \"@elizaos/core\";\r\n\r\nexport class TokenPriceEvaluator implements Evaluator {\r\n    name = \"TOKEN_PRICE_EVALUATOR\";\r\n    similes = [\"price\", \"token price\", \"check price\"];\r\n    description = \"Evaluates messages for token price requests\";\r\n\r\n    async validate(runtime: IAgentRuntime, message: Memory): Promise<boolean> {\r\n        const content = typeof message.content === 'string'\r\n            ? message.content\r\n            : message.content?.text;\r\n\r\n        if (!content) return false;\r\n\r\n        // Check for price-related keywords\r\n        const hasPriceKeyword = /\\b(price|value|worth|cost)\\b/i.test(content) || /(цен.|стоимость|стоит.)/i.test(content);;\r\n\r\n        // Look for either:\r\n        // 1. Ethereum address\r\n        // 2. Token symbol starting with $ or #\r\n        // 3. Token symbol after \"of\" or \"for\" (case insensitive)\r\n        const hasToken = (\r\n            /0x[a-fA-F0-9]{40}/.test(content) || // Ethereum address\r\n            /[$#][a-zA-Z]+/.test(content) || // $TOKEN or #TOKEN format\r\n            /\\b(of|for)\\s+[a-zA-Z0-9]+\\b/i.test(content) // \"price of TOKEN\" format\r\n        );\r\n\r\n        return hasPriceKeyword && hasToken;\r\n    }\r\n\r\n    async handler(_runtime: IAgentRuntime, _message: Memory, _state?: State): Promise<string> {\r\n        return \"GET_TOKEN_PRICE\";\r\n    }\r\n\r\n    examples = [\r\n    {\r\n      context: \"Пользователь хочет узнать цену с помощью адреса\",\r\n      messages: [\r\n        {\r\n          user: \"{{user1}}\",\r\n          content: {\r\n            text: \"Цена 0x1234567890123456789012345678901234567890?\",\r\n            action: \"GET_TOKEN_PRICE\"\r\n          }\r\n        }\r\n      ],\r\n      outcome: \"GET_TOKEN_PRICE\"\r\n    },\r\n    {\r\n      context: \"User checking token price with $ symbol\",\r\n      messages: [\r\n        {\r\n          user: \"{{user1}}\",\r\n          content: {\r\n            text: \"Check price of $eth\",\r\n            action: \"GET_TOKEN_PRICE\"\r\n          }\r\n        }\r\n      ],\r\n      outcome: \"GET_TOKEN_PRICE\"\r\n    },\r\n    {\r\n      context: \"User checking token price with plain symbol\",\r\n      messages: [\r\n        {\r\n          user: \"{{user1}}\",\r\n          content: {\r\n            text: \"What's the value for btc\",\r\n            action: \"GET_TOKEN_PRICE\"\r\n          }\r\n        }\r\n      ],\r\n      outcome: \"GET_TOKEN_PRICE\"\r\n    }\r\n  ];\r\n}\r\n\r\nexport const tokenPriceEvaluator = new TokenPriceEvaluator();","import {\r\n    type Action,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type State,\r\n    type HandlerCallback,\r\n    elizaLogger,\r\n    getEmbeddingZeroVector,\r\n} from \"@elizaos/core\";\r\n\r\ninterface TokenProfile {\r\n    url: string;\r\n    description?: string;\r\n    chainId: string;\r\n    tokenAddress: string;\r\n    links: {url:string}[]\r\n}\r\n\r\nconst createTokenMemory = async (\r\n    runtime: IAgentRuntime,\r\n    _message: Memory,\r\n    formattedOutput: string\r\n) => {\r\n    const memory: Memory = {\r\n        userId: _message.userId,\r\n        agentId: _message.agentId,\r\n        roomId: _message.roomId,\r\n        content: { text: formattedOutput },\r\n        createdAt: Date.now(),\r\n        embedding: getEmbeddingZeroVector(),\r\n    };\r\n    await runtime.messageManager.createMemory(memory);\r\n};\r\n\r\nexport const latestTokensTemplate = `Определите, является ли это запросом на получение последних токенов. Если это один из указанных случаев, выполните соответствующее действие:\r\n\r\nСитуация 1: \"Получить последние токены\"\r\n- Сообщение содержит: слова вроде \"последние\", \"новые\", \"свежие\" И \"токены\"\r\n- Пример: \"Покажи последние токены\" или \"Какие новые токены появились?\"\r\n- Действие: Получить список самых недавно добавленных токенов\r\n\r\nПредыдущий диалог для контекста:\r\n{{conversation}}\r\n\r\nВы отвечаете на сообщение: {{message}}\r\n`;\r\n\r\nexport class LatestTokensAction implements Action {\r\n    name = \"GET_LATEST_TOKENS\";\r\n    similes = [\"FETCH_NEW_TOKENS\", \"CHECK_RECENT_TOKENS\", \"LIST_NEW_TOKENS\"];\r\n    description = \"Get the latest tokens from DexScreener API\";\r\n    suppressInitialMessage = true;\r\n    template = latestTokensTemplate;\r\n\r\n    async validate(_runtime: IAgentRuntime, message: Memory): Promise<boolean> {\r\n        const content =\r\n            typeof message.content === \"string\"\r\n                ? message.content\r\n                : message.content?.text;\r\n\r\n        if (!content) return false;\r\n\r\n        const hasLatestKeyword = /\\b(latest|new|recent)\\b/i.test(content) || /(последн..|нов..|недавн..)/i.test(content);;\r\n        const hasTokensKeyword = /\\b(tokens?|coins?|crypto)\\b/i.test(content) || /(токен|токен.|токен..|монет..|монет.|монет)/i.test(content);;\r\n\r\n        return hasLatestKeyword && hasTokensKeyword;\r\n    }\r\n\r\n    async handler(\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State,\r\n        _options: { [key: string]: unknown } = {},\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> {\r\n        elizaLogger.log(\"Starting GET_LATEST_TOKENS handler...\");\r\n\r\n        try {\r\n            const response = await fetch(\r\n                \"https://api.dexscreener.com/token-profiles/latest/v1\",\r\n                {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        accept: \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const tokens: TokenProfile[] = await response.json();\r\n            const partialTokens = await tokens.filter(item => item.chainId !== \"solana\")\r\n            const formattedOutput = partialTokens.map((token) => {\r\n                    const [website, twitter, tg] = token.links\r\n                    const description = token.description || \"-\";\r\n                    return `${token.chainId} \\n[📜${token.tokenAddress}](${token.url})\\n${website?(`[🌐Сайт](${website.url})`): (\"\")}${twitter?(`\\n[🟢X](${twitter.url})`): (\"\")}${tg?(`\\n[🔵Telegram](${tg.url})`): (\"\")}\\nDescription: ${description}\\n ——————————————————————— \\n`;})\r\n                .join(\"\");\r\n\r\n            await createTokenMemory(runtime, message, formattedOutput);\r\n\r\n            if (callback) {\r\n                await callback({\r\n                    text: formattedOutput,\r\n                    action: this.name,\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error fetching latest tokens:\", error);\r\n\r\n            if (callback) {\r\n                await callback({\r\n                    text: `Failed to fetch latest tokens: ${error.message}`,\r\n                    action: this.name,\r\n                });\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    examples = [\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"покажи мне последние токены\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent}}\",\r\n        content: {\r\n          text: \"Here are the latest tokens added to DexScreener...\",\r\n          action: \"GET_LATEST_TOKENS\"\r\n        }\r\n      }\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"список новых токенов\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent}}\",\r\n        content: {\r\n          text: \"Here are the latest tokens added to DexScreener...\",\r\n          action: \"GET_LATEST_TOKENS\"\r\n        }\r\n      }\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"список последних токенов\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent}}\",\r\n        content: {\r\n          text: \"Here are the latest tokens added to DexScreener...\",\r\n          action: \"GET_LATEST_TOKENS\"\r\n        }\r\n      }\r\n    ]\r\n  ];\r\n}\r\n\r\nexport const latestBoostedTemplate = `Определите, является ли это запросом на получение последних токенов с бустом. Если это один из указанных случаев, выполните соответствующее действие:\r\n\r\nСитуация 1: \"Получить последние продвигаемые токены\"\r\n- Сообщение содержит: слова вроде \"последние\", \"новые\", \"бустят\",\"свежие\", \"токены с бустом\" И \"буст токены\"\r\n- Пример: \"Покажи последние продвигаемые токены\" или \"Какие новые токены продвигаются?\"\r\n- Действие: GET_LATEST_BOOSTED_TOKENS\r\n\r\nПредыдущий диалог для контекста:\r\n{{conversation}}\r\n\r\nВы отвечаете на сообщение: {{message}}\r\n`;\r\n\r\nexport class LatestBoostedTokensAction implements Action {\r\n    name = \"GET_LATEST_BOOSTED_TOKENS\";\r\n    similes = [\r\n        \"FETCH_NEW_BOOSTED_TOKENS\",\r\n        \"CHECK_RECENT_BOOSTED_TOKENS\",\r\n        \"LIST_NEW_BOOSTED_TOKENS\",\r\n    ];\r\n    description = \"Get the latest boosted tokens from DexScreener API\";\r\n    suppressInitialMessage = true;\r\n    template = latestBoostedTemplate;\r\n\r\n    async validate(_runtime: IAgentRuntime, message: Memory): Promise<boolean> {\r\n        const content =\r\n            typeof message.content === \"string\"\r\n                ? message.content\r\n                : message.content?.text;\r\n\r\n        if (!content) return false;\r\n\r\n        const hasLatestKeyword = /\\b(latest|new|recent)\\b/i.test(content)|| /(последн..|нов..|недавн..)/i.test(content);;\r\n        const hasBoostedKeyword = /\\b(boosted|promoted|featured)\\b/i.test(content) || /(буст|буст..|продвигаем..|продвижен..)/i.test(content);;\r\n        const hasTokensKeyword = /\\b(tokens?|coins?|crypto)\\b/i.test(content) || /(токен|токен.|токен..|монет..|монет.|монет)/i.test(content);;\r\n\r\n        return hasLatestKeyword && (hasBoostedKeyword || hasTokensKeyword);\r\n    }\r\n\r\n    async handler(\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State,\r\n        _options: { [key: string]: unknown } = {},\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> {\r\n        elizaLogger.log(\"Starting GET_LATEST_BOOSTED_TOKENS handler...\");\r\n\r\n        try {\r\n            const response = await fetch(\r\n                \"https://api.dexscreener.com/token-boosts/latest/v1\",\r\n                {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        accept: \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const tokens: TokenProfile[] = await response.json();\r\n            const partialTokens = await tokens.filter(item => item.chainId !== \"solana\")\r\n            const formattedOutput = partialTokens\r\n                .map((token) => {\r\n                           const description = token.description || \"\";\r\n                           const [website, twitter, tg] = token.links\r\n        return `${token.chainId} \\n[📜${token.tokenAddress}](${token.url})\\n${website?(`[🌐Сайт](${website.url})`): (\"\")}${twitter?(`\\n[🟢X](${twitter.url})`): (\"\")}${tg?(`\\n[🔵Telegram](${tg.url})`): (\"\")}\\nDescription: ${description}\\n ——————————————————————— \\n`;})\r\n                     \r\n                .join(\"\");\r\n\r\n            await createTokenMemory(runtime, message, formattedOutput);\r\n\r\n            if (callback) {\r\n                await callback({\r\n                    text: formattedOutput,\r\n                    action: this.name,\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error fetching latest boosted tokens:\", error);\r\n\r\n            if (callback) {\r\n                await callback({\r\n                    text: `Failed to fetch latest boosted tokens: ${error.message}`,\r\n                    action: this.name,\r\n                });\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    examples = [\r\n      \r\n      [\r\n        {\r\n          user: \"{{user}}\",\r\n          content: {\r\n            text: \"покажи список новых токенов с продвижением\"\r\n          }\r\n        },\r\n        {\r\n          user: \"{{system}}\",\r\n          content: {\r\n            text:\"Список новых токенов с продвижением\",\r\n            action: \"GET_LATEST_BOOSTED_TOKENS\"\r\n          }\r\n        }\r\n      ],\r\n      [\r\n        {\r\n          user: \"{{user1}}\",\r\n          content: {\r\n            text: \"новые токены с бустом\"\r\n          }\r\n        },\r\n        {\r\n          user: \"{{agent}}\",\r\n          content: {\r\n            text:\"новые токены с бустом\",\r\n            action: \"GET_LATEST_BOOSTED_TOKENS\"\r\n          }\r\n        }\r\n      ]\r\n    \r\n  ];\r\n    \r\n}\r\n\r\nexport const topBoostedTemplate = `Определите, является ли это запросом на топ токенов с бустом. Если это один из указанных случаев, выполните соответствующее действие:\r\n\r\nСитуация 1: \"Получить топ токенов c бустом\"\r\n- Сообщение содержит: слова вроде \"в топе\", \"лидрующие\", \"топ\", \"лучшие\", \"самые\",\"продвигаемые\" И \"токены с бустом\"\r\n- Пример: \"Покажи топ токенов с бустом\", \"лидирующие токены с бустом\" или \"Какие токены продвигаются больше всего?\"\r\n- Действие: GET_TOP_BOOSTED_TOKENS\r\n\r\nПредыдущий диалог для контекста:\r\n{{conversation}}\r\n\r\nВы отвечаете на сообщение: {{message}}\r\n`;\r\n\r\nexport class TopBoostedTokensAction implements Action {\r\n    name = \"GET_TOP_BOOSTED_TOKENS\";\r\n    similes = [\r\n        \"FETCH_MOST_BOOSTED_TOKENS\",\r\n        \"CHECK_HIGHEST_BOOSTED_TOKENS\",\r\n        \"LIST_TOP_BOOSTED_TOKENS\",\r\n    ];\r\n    description = \"Get tokens with most active boosts from DexScreener API\";\r\n    suppressInitialMessage = true;\r\n    template = topBoostedTemplate;\r\n\r\n    async validate(_runtime: IAgentRuntime, message: Memory): Promise<boolean> {\r\n        const content =\r\n            typeof message.content === \"string\"\r\n                ? message.content\r\n                : message.content?.text;\r\n\r\n        if (!content) return false;\r\n\r\n        const hasTopKeyword = /\\b(top|best|most)\\b/i.test(content)|| /(топ|топ.|топовы.)/i.test(content);;\r\n        const hasBoostedKeyword = /\\b(boosted|promoted|featured)\\b/i.test(content) || /(буст|буст..|продвигаем..|продвижен..)/i.test(content);;\r\n        const hasTokensKeyword = /\\b(tokens?|coins?|crypto)\\b/i.test(content)|| /(токен|токен.|токен..|монет..|монет.|монет)/i.test(content);;\r\n\r\n        return hasTopKeyword && (hasBoostedKeyword || hasTokensKeyword);\r\n    }\r\n\r\n    async handler(\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        _state?: State,\r\n        _options: { [key: string]: unknown } = {},\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> {\r\n        elizaLogger.log(\"Starting GET_TOP_BOOSTED_TOKENS handler...\");\r\n\r\n        try {\r\n            const response = await fetch(\r\n                \"https://api.dexscreener.com/token-boosts/top/v1\",\r\n                {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        accept: \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const tokens: TokenProfile[] = await response.json();\r\n            const partialTokens = await tokens.filter(item => item.chainId !== \"solana\")\r\n            const formattedOutput = partialTokens\r\n                .map((token) => {\r\n                   const [website, twitter, tg] = token.links\r\n        const description = token.description || \"-\";\r\n        return `${token.chainId} \\n[📜${token.tokenAddress}](${token.url})\\n${website?(`[🌐Сайт](${website.url})`): (\"\")}${twitter?(`\\n[🟢X](${twitter.url})`): (\"\")}${tg?(`\\n[🔵Telegram](${tg.url})`): (\"\")}\\nDescription: ${description}\\n ——————————————————————— \\n`;})\r\n                .join(\"\");\r\n\r\n            await createTokenMemory(runtime, message, formattedOutput);\r\n\r\n            if (callback) {\r\n                await callback({\r\n                    text: formattedOutput,\r\n                    action: this.name,\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error fetching top boosted tokens:\", error);\r\n\r\n            if (callback) {\r\n                await callback({\r\n                    text: `Failed to fetch top boosted tokens: ${error.message}`,\r\n                    action: this.name,\r\n                });\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    examples = [\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"покажи топовые токены с бустом\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent}}\",\r\n        content: {\r\n          text: \"Here are the tokens with the most active boosts on DexScreener...\",\r\n          action: \"GET_TOP_BOOSTED_TOKENS\"\r\n        }\r\n      }\r\n    ],\r\n    [\r\n      {\r\n        user: \"{{user1}}\",\r\n        content: {\r\n          text: \"покажи токены в топе с бустом\"\r\n        }\r\n      },\r\n      {\r\n        user: \"{{agent}}\",\r\n        content: {\r\n          text: \"Here are the tokens with the most active boosts on DexScreener...\",\r\n          action: \"GET_TOP_BOOSTED_TOKENS\"\r\n        }\r\n      }\r\n    ]\r\n  ];\r\n}\r\n\r\nexport const latestTokensAction = new LatestTokensAction();\r\nexport const latestBoostedTokensAction = new LatestBoostedTokensAction();\r\nexport const topBoostedTokensAction = new TopBoostedTokensAction();\r\n","export * from \"./tokenAction\";\r\nexport * from \"./trendsAction\";\r\n","export * from \"./tokenEvaluator.ts\";","export * from \"./tokenProvider.ts\";","import type { Plugin } from \"@elizaos/core\"\r\nimport { TokenPriceAction } from \"./actions/tokenAction\"\r\nimport { TokenPriceEvaluator } from \"./evaluators/tokenEvaluator\"\r\nimport { TokenPriceProvider } from \"./providers/tokenProvider\"\r\nimport { LatestTokensAction, LatestBoostedTokensAction, TopBoostedTokensAction } from \"./actions/trendsAction\"\r\n\r\nexport * as actions from \"./actions\"\r\nexport * as evaluators from \"./evaluators\"\r\nexport * as providers from \"./providers\"\r\n\r\nexport const dexScreenerPlugin: Plugin = {\r\n\tname: \"dexscreener\",\r\n\tdescription: \"Dex Screener Plugin with Token Price Action, Token Trends, Evaluators and Providers\",\r\n\tactions: [new TokenPriceAction(), new LatestTokensAction(), new LatestBoostedTokensAction(), new TopBoostedTokensAction()],\r\n\tevaluators: [new TokenPriceEvaluator()],\r\n\tproviders: [new TokenPriceProvider()],\r\n}\r\n\r\nexport default dexScreenerPlugin\r\n"],"mappings":";;;;;;;AAkBO,IAAM,qBAAN,MAA6C;AAAA,EAChD,MAAM,IACF,gBACA,SACA,QACe;AAvBvB;AAwBQ,QAAI;AACA,YAAM,UACF,OAAO,QAAQ,YAAY,WACrB,QAAQ,WACR,aAAQ,YAAR,mBAAiB;AAE3B,UAAI,CAAC,SAAS;AACV,cAAM,IAAI,MAAM,6BAA6B;AAAA,MACjD;AAGA,YAAM,kBAAkB,KAAK,aAAa,OAAO;AACjD,UAAI,CAAC,iBAAiB;AAElB;AAAA,MACJ;AAEA,cAAQ,IAAI,6BAA6B,eAAe,EAAE;AAG1D,YAAM,YACF,sBAAsB,KAAK,eAAe,KAC1C,gCAAgC,KAAK,eAAe;AACxD,YAAM,WAAW,YACX,iDAAiD,eAAe,KAChE,mDAAmD,eAAe;AAExE,YAAM,WAAW,MAAM,MAAM,QAAQ;AACrC,UAAI,CAAC,SAAS,IAAI;AACd,cAAM,IAAI,MAAM,uBAAuB,SAAS,UAAU,EAAE;AAAA,MAChE;AAEA,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,UAAI,CAAC,KAAK,SAAS,KAAK,MAAM,WAAW,GAAG;AACxC,cAAM,IAAI,MAAM,6BAA6B,eAAe,EAAE;AAAA,MAClE;AAGA,YAAM,WAAW,KAAK,YAAY,KAAK,KAAK;AAC5C,aAAO,KAAK,gBAAgB,QAAQ;AAAA,IACxC,SAAS,OAAO;AACZ,cAAQ,MAAM,6BAA6B,KAAK;AAChD,aAAO,UAAU,MAAM,OAAO;AAAA,IAClC;AAAA,EACJ;AAAA,EAEQ,aAAa,SAAgC;AAEjD,UAAM,WAAW;AAAA,MACb;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,IACJ;AAEA,eAAW,WAAW,UAAU;AAC5B,YAAM,QAAQ,QAAQ,MAAM,OAAO;AACnC,UAAI,OAAO;AAEP,cAAM,QAAQ,MAAM,CAAC,KAAK,MAAM,CAAC;AAEjC,eAAO,MAAM,QAAQ,SAAS,EAAE,EAAE,YAAY,EAAE,KAAK;AAAA,MACzD;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,YAAY,OAA2C;AAC3D,WAAO,MAAM,OAAO,CAAC,MAAM,YAAY;AA9F/C;AA+FY,YAAM,gBAAgB,OAAO,aAAW,UAAK,cAAL,mBAAgB,QAAO,GAAG;AAClE,YAAM,mBAAmB,OAAO,aAAW,aAAQ,cAAR,mBAAmB,QAAO,GAAG;AACxE,aAAO,mBAAmB,gBAAgB,UAAU;AAAA,IACxD,GAAG,MAAM,CAAC,CAAC;AAAA,EACf;AAAA,EAEQ,gBAAgB,MAA+B;AArG3D;AAsGQ,UAAM,QAAQ,OAAO,WAAW,KAAK,QAAQ,EAAE,QAAQ,CAAC;AACxD,UAAM,YAAY,OAAO;AAAA,QACrB,UAAK,cAAL,mBAAgB,QAAO;AAAA,IAC3B,EAAE,eAAe;AACjB,UAAM,YAAU,UAAK,WAAL,mBAAa,QAAO,GAAG,eAAe;AAEtD,WAAO;AAAA,UACL,KAAK,UAAU,MAAM,oCAAW,KAAK;AAAA,uEAAmB,SAAS;AAAA,+EAAsB,MAAM;AAAA,EACnG;AACJ;AAEO,IAAM,qBAAqB,IAAI,mBAAmB;;;AC9GlD,IAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAatB,IAAM,mBAAN,MAAyC;AAAA,EAC5C,OAAO;AAAA,EACP,UAAU,CAAC,qBAAqB,qBAAqB,aAAa;AAAA,EAClE,cAAc;AAAA,EACd,yBAAyB;AAAA,EACzB,WAAW;AAAA,EAEX,MAAM,SAAS,UAAyB,SAAmC;AAvB/E;AAwBQ,UAAM,UAAU,OAAO,QAAQ,YAAY,WACrC,QAAQ,WACR,aAAQ,YAAR,mBAAiB;AAEvB,QAAI,CAAC,QAAS,QAAO;AAErB,UAAM,kBAAkB,gCAAgC,KAAK,OAAO,KAAK,2BAA2B,KAAK,OAAO;AAAE;AAClH,UAAM,WACF,oBAAoB,KAAK,OAAO,KAChC,qBAAqB,KAAK,OAAO;AAGrC,WAAO,mBAAmB;AAAA,EAC9B;AAAA,EAEA,MAAM,QACF,SACA,SACA,OACA,WAAuC,CAAC,GACxC,UACgB;AAChB,QAAI;AAEA,YAAM,WAAW,QAAQ,UAAU,KAAK,OAAK,aAAa,kBAAkB;AAC5E,UAAI,CAAC,UAAU;AACX,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD;AAGA,cAAQ,IAAI,wBAAwB;AACpC,YAAM,YAAY,MAAM,SAAS,IAAI,SAAS,SAAS,KAAK;AAC5D,cAAQ,IAAI,wBAAwB,SAAS;AAE7C,UAAI,UAAU,SAAS,OAAO,GAAG;AAC7B,cAAM,IAAI,MAAM,SAAS;AAAA,MAC7B;AAGA,UAAI,UAAU;AACV,cAAM,SAAS;AAAA,UACX,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,QACjB,CAAC;AAAA,MACL;AAGA,UAAI,OAAO;AACP,cAAM,eAAe;AAAA,UACjB,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,QACjB;AAAA,MACJ;AAEA,aAAO;AAAA,IAEX,SAAS,OAAO;AACZ,cAAQ,MAAM,kCAAkC,KAAK;AAErD,UAAI,UAAU;AACV,cAAM,SAAS;AAAA,UACX,MAAM,4CAA4C,MAAM,OAAO;AAAA,UAC/D,QAAQ,KAAK;AAAA,QACjB,CAAC;AAAA,MACL;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEC,WAAW;AAAA,IACZ;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAEO,IAAM,mBAAmB,IAAI,iBAAiB;;;ACzM9C,IAAM,sBAAN,MAA+C;AAAA,EAClD,OAAO;AAAA,EACP,UAAU,CAAC,SAAS,eAAe,aAAa;AAAA,EAChD,cAAc;AAAA,EAEd,MAAM,SAAS,SAAwB,SAAmC;AAP9E;AAQQ,UAAM,UAAU,OAAO,QAAQ,YAAY,WACrC,QAAQ,WACR,aAAQ,YAAR,mBAAiB;AAEvB,QAAI,CAAC,QAAS,QAAO;AAGrB,UAAM,kBAAkB,gCAAgC,KAAK,OAAO,KAAK,2BAA2B,KAAK,OAAO;AAAE;AAMlH,UAAM,WACF,oBAAoB,KAAK,OAAO;AAAA,IAChC,gBAAgB,KAAK,OAAO;AAAA,IAC5B,+BAA+B,KAAK,OAAO;AAG/C,WAAO,mBAAmB;AAAA,EAC9B;AAAA,EAEA,MAAM,QAAQ,UAAyB,UAAkB,QAAiC;AACtF,WAAO;AAAA,EACX;AAAA,EAEA,WAAW;AAAA,IACX;AAAA,MACE,SAAS;AAAA,MACT,UAAU;AAAA,QACR;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,YACP,MAAM;AAAA,YACN,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,MACA,SAAS;AAAA,IACX;AAAA,IACA;AAAA,MACE,SAAS;AAAA,MACT,UAAU;AAAA,QACR;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,YACP,MAAM;AAAA,YACN,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,MACA,SAAS;AAAA,IACX;AAAA,IACA;AAAA,MACE,SAAS;AAAA,MACT,UAAU;AAAA,QACR;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,YACP,MAAM;AAAA,YACN,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,MACA,SAAS;AAAA,IACX;AAAA,EACF;AACF;AAEO,IAAM,sBAAsB,IAAI,oBAAoB;;;AC7E3D;AAAA,EAMI;AAAA,EACA;AAAA,OACG;AAUP,IAAM,oBAAoB,OACtB,SACA,UACA,oBACC;AACD,QAAM,SAAiB;AAAA,IACnB,QAAQ,SAAS;AAAA,IACjB,SAAS,SAAS;AAAA,IAClB,QAAQ,SAAS;AAAA,IACjB,SAAS,EAAE,MAAM,gBAAgB;AAAA,IACjC,WAAW,KAAK,IAAI;AAAA,IACpB,WAAW,uBAAuB;AAAA,EACtC;AACA,QAAM,QAAQ,eAAe,aAAa,MAAM;AACpD;AAEO,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa7B,IAAM,qBAAN,MAA2C;AAAA,EAC9C,OAAO;AAAA,EACP,UAAU,CAAC,oBAAoB,uBAAuB,iBAAiB;AAAA,EACvE,cAAc;AAAA,EACd,yBAAyB;AAAA,EACzB,WAAW;AAAA,EAEX,MAAM,SAAS,UAAyB,SAAmC;AAtD/E;AAuDQ,UAAM,UACF,OAAO,QAAQ,YAAY,WACrB,QAAQ,WACR,aAAQ,YAAR,mBAAiB;AAE3B,QAAI,CAAC,QAAS,QAAO;AAErB,UAAM,mBAAmB,2BAA2B,KAAK,OAAO,KAAK,8BAA8B,KAAK,OAAO;AAAE;AACjH,UAAM,mBAAmB,+BAA+B,KAAK,OAAO,KAAK,+CAA+C,KAAK,OAAO;AAAE;AAEtI,WAAO,oBAAoB;AAAA,EAC/B;AAAA,EAEA,MAAM,QACF,SACA,SACA,QACA,WAAuC,CAAC,GACxC,UACgB;AAChB,gBAAY,IAAI,uCAAuC;AAEvD,QAAI;AACA,YAAM,WAAW,MAAM;AAAA,QACnB;AAAA,QACA;AAAA,UACI,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,CAAC,SAAS,IAAI;AACd,cAAM,IAAI,MAAM,uBAAuB,SAAS,MAAM,EAAE;AAAA,MAC5D;AAEA,YAAM,SAAyB,MAAM,SAAS,KAAK;AACnD,YAAM,gBAAgB,MAAM,OAAO,OAAO,UAAQ,KAAK,YAAY,QAAQ;AAC3E,YAAM,kBAAkB,cAAc,IAAI,CAAC,UAAU;AAC7C,cAAM,CAAC,SAAS,SAAS,EAAE,IAAI,MAAM;AACrC,cAAM,cAAc,MAAM,eAAe;AACzC,eAAO,GAAG,MAAM,OAAO;AAAA,YAAS,MAAM,YAAY,KAAK,MAAM,GAAG;AAAA,EAAM,UAAS,uCAAY,QAAQ,GAAG,MAAO,EAAG,GAAG,UAAS;AAAA,eAAW,QAAQ,GAAG,MAAO,EAAG,GAAG,KAAI;AAAA,sBAAkB,GAAG,GAAG,MAAO,EAAG;AAAA,eAAkB,WAAW;AAAA;AAAA;AAAA,MAAgC,CAAC,EACtQ,KAAK,EAAE;AAEZ,YAAM,kBAAkB,SAAS,SAAS,eAAe;AAEzD,UAAI,UAAU;AACV,cAAM,SAAS;AAAA,UACX,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,QACjB,CAAC;AAAA,MACL;AAEA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,kBAAY,MAAM,iCAAiC,KAAK;AAExD,UAAI,UAAU;AACV,cAAM,SAAS;AAAA,UACX,MAAM,kCAAkC,MAAM,OAAO;AAAA,UACrD,QAAQ,KAAK;AAAA,QACjB,CAAC;AAAA,MACL;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,WAAW;AAAA,IACX;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAEO,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa9B,IAAM,4BAAN,MAAkD;AAAA,EACrD,OAAO;AAAA,EACP,UAAU;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,cAAc;AAAA,EACd,yBAAyB;AAAA,EACzB,WAAW;AAAA,EAEX,MAAM,SAAS,UAAyB,SAAmC;AArM/E;AAsMQ,UAAM,UACF,OAAO,QAAQ,YAAY,WACrB,QAAQ,WACR,aAAQ,YAAR,mBAAiB;AAE3B,QAAI,CAAC,QAAS,QAAO;AAErB,UAAM,mBAAmB,2BAA2B,KAAK,OAAO,KAAI,8BAA8B,KAAK,OAAO;AAAE;AAChH,UAAM,oBAAoB,mCAAmC,KAAK,OAAO,KAAK,0CAA0C,KAAK,OAAO;AAAE;AACtI,UAAM,mBAAmB,+BAA+B,KAAK,OAAO,KAAK,+CAA+C,KAAK,OAAO;AAAE;AAEtI,WAAO,qBAAqB,qBAAqB;AAAA,EACrD;AAAA,EAEA,MAAM,QACF,SACA,SACA,QACA,WAAuC,CAAC,GACxC,UACgB;AAChB,gBAAY,IAAI,+CAA+C;AAE/D,QAAI;AACA,YAAM,WAAW,MAAM;AAAA,QACnB;AAAA,QACA;AAAA,UACI,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,CAAC,SAAS,IAAI;AACd,cAAM,IAAI,MAAM,uBAAuB,SAAS,MAAM,EAAE;AAAA,MAC5D;AAEA,YAAM,SAAyB,MAAM,SAAS,KAAK;AACnD,YAAM,gBAAgB,MAAM,OAAO,OAAO,UAAQ,KAAK,YAAY,QAAQ;AAC3E,YAAM,kBAAkB,cACnB,IAAI,CAAC,UAAU;AACL,cAAM,cAAc,MAAM,eAAe;AACzC,cAAM,CAAC,SAAS,SAAS,EAAE,IAAI,MAAM;AACxD,eAAO,GAAG,MAAM,OAAO;AAAA,YAAS,MAAM,YAAY,KAAK,MAAM,GAAG;AAAA,EAAM,UAAS,uCAAY,QAAQ,GAAG,MAAO,EAAG,GAAG,UAAS;AAAA,eAAW,QAAQ,GAAG,MAAO,EAAG,GAAG,KAAI;AAAA,sBAAkB,GAAG,GAAG,MAAO,EAAG;AAAA,eAAkB,WAAW;AAAA;AAAA;AAAA,MAAgC,CAAC,EAE1P,KAAK,EAAE;AAEZ,YAAM,kBAAkB,SAAS,SAAS,eAAe;AAEzD,UAAI,UAAU;AACV,cAAM,SAAS;AAAA,UACX,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,QACjB,CAAC;AAAA,MACL;AAEA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,kBAAY,MAAM,yCAAyC,KAAK;AAEhE,UAAI,UAAU;AACV,cAAM,SAAS;AAAA,UACX,MAAM,0CAA0C,MAAM,OAAO;AAAA,UAC7D,QAAQ,KAAK;AAAA,QACjB,CAAC;AAAA,MACL;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,WAAW;AAAA,IAET;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAK;AAAA,UACL,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAK;AAAA,UACL,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EAEJ;AAEF;AAEO,IAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa3B,IAAM,yBAAN,MAA+C;AAAA,EAClD,OAAO;AAAA,EACP,UAAU;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EACA,cAAc;AAAA,EACd,yBAAyB;AAAA,EACzB,WAAW;AAAA,EAEX,MAAM,SAAS,UAAyB,SAAmC;AA3U/E;AA4UQ,UAAM,UACF,OAAO,QAAQ,YAAY,WACrB,QAAQ,WACR,aAAQ,YAAR,mBAAiB;AAE3B,QAAI,CAAC,QAAS,QAAO;AAErB,UAAM,gBAAgB,uBAAuB,KAAK,OAAO,KAAI,sBAAsB,KAAK,OAAO;AAAE;AACjG,UAAM,oBAAoB,mCAAmC,KAAK,OAAO,KAAK,0CAA0C,KAAK,OAAO;AAAE;AACtI,UAAM,mBAAmB,+BAA+B,KAAK,OAAO,KAAI,+CAA+C,KAAK,OAAO;AAAE;AAErI,WAAO,kBAAkB,qBAAqB;AAAA,EAClD;AAAA,EAEA,MAAM,QACF,SACA,SACA,QACA,WAAuC,CAAC,GACxC,UACgB;AAChB,gBAAY,IAAI,4CAA4C;AAE5D,QAAI;AACA,YAAM,WAAW,MAAM;AAAA,QACnB;AAAA,QACA;AAAA,UACI,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,QAAQ;AAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,CAAC,SAAS,IAAI;AACd,cAAM,IAAI,MAAM,uBAAuB,SAAS,MAAM,EAAE;AAAA,MAC5D;AAEA,YAAM,SAAyB,MAAM,SAAS,KAAK;AACnD,YAAM,gBAAgB,MAAM,OAAO,OAAO,UAAQ,KAAK,YAAY,QAAQ;AAC3E,YAAM,kBAAkB,cACnB,IAAI,CAAC,UAAU;AACb,cAAM,CAAC,SAAS,SAAS,EAAE,IAAI,MAAM;AAChD,cAAM,cAAc,MAAM,eAAe;AACzC,eAAO,GAAG,MAAM,OAAO;AAAA,YAAS,MAAM,YAAY,KAAK,MAAM,GAAG;AAAA,EAAM,UAAS,uCAAY,QAAQ,GAAG,MAAO,EAAG,GAAG,UAAS;AAAA,eAAW,QAAQ,GAAG,MAAO,EAAG,GAAG,KAAI;AAAA,sBAAkB,GAAG,GAAG,MAAO,EAAG;AAAA,eAAkB,WAAW;AAAA;AAAA;AAAA,MAAgC,CAAC,EAC1P,KAAK,EAAE;AAEZ,YAAM,kBAAkB,SAAS,SAAS,eAAe;AAEzD,UAAI,UAAU;AACV,cAAM,SAAS;AAAA,UACX,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,QACjB,CAAC;AAAA,MACL;AAEA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,kBAAY,MAAM,sCAAsC,KAAK;AAE7D,UAAI,UAAU;AACV,cAAM,SAAS;AAAA,UACX,MAAM,uCAAuC,MAAM,OAAO;AAAA,UAC1D,QAAQ,KAAK;AAAA,QACjB,CAAC;AAAA,MACL;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,WAAW;AAAA,IACX;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAEO,IAAM,qBAAqB,IAAI,mBAAmB;AAClD,IAAM,4BAA4B,IAAI,0BAA0B;AAChE,IAAM,yBAAyB,IAAI,uBAAuB;;;ACvbjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;;;ACUO,IAAM,oBAA4B;AAAA,EACxC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,CAAC,IAAI,iBAAiB,GAAG,IAAI,mBAAmB,GAAG,IAAI,0BAA0B,GAAG,IAAI,uBAAuB,CAAC;AAAA,EACzH,YAAY,CAAC,IAAI,oBAAoB,CAAC;AAAA,EACtC,WAAW,CAAC,IAAI,mBAAmB,CAAC;AACrC;AAEA,IAAO,gBAAQ;","names":[]}