import {
    type Action,
    type IAgentRuntime,
    type Memory,
    type State,
    type HandlerCallback,
    elizaLogger,
    getEmbeddingZeroVector,
} from "@elizaos/core";

interface TokenProfile {
    url: string;
    description?: string;
    chainId: string;
    tokenAddress: string;
    links: {url:string}[]
}

const createTokenMemory = async (
    runtime: IAgentRuntime,
    _message: Memory,
    formattedOutput: string
) => {
    const memory: Memory = {
        userId: _message.userId,
        agentId: _message.agentId,
        roomId: _message.roomId,
        content: { text: formattedOutput },
        createdAt: Date.now(),
        embedding: getEmbeddingZeroVector(),
    };
    await runtime.messageManager.createMemory(memory);
};

export const latestTokensTemplate = `–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:

–°–∏—Ç—É–∞—Ü–∏—è 1: "–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã"
- –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç: —Å–ª–æ–≤–∞ –≤—Ä–æ–¥–µ "–ø–æ—Å–ª–µ–¥–Ω–∏–µ", "–Ω–æ–≤—ã–µ", "—Å–≤–µ–∂–∏–µ" –ò "—Ç–æ–∫–µ–Ω—ã"
- –ü—Ä–∏–º–µ—Ä: "–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã" –∏–ª–∏ "–ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ—è–≤–∏–ª–∏—Å—å?"
- –î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤

–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
{{conversation}}

–í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {{message}}
`;

export class LatestTokensAction implements Action {
    name = "GET_LATEST_TOKENS";
    similes = ["FETCH_NEW_TOKENS", "CHECK_RECENT_TOKENS", "LIST_NEW_TOKENS"];
    description = "Get the latest tokens from DexScreener API";
    suppressInitialMessage = true;
    template = latestTokensTemplate;

    async validate(_runtime: IAgentRuntime, message: Memory): Promise<boolean> {
        const content =
            typeof message.content === "string"
                ? message.content
                : message.content?.text;

        if (!content) return false;

        const hasLatestKeyword = /\b(latest|new|recent)\b/i.test(content) || /(–ø–æ—Å–ª–µ–¥–Ω..|–Ω–æ–≤..|–Ω–µ–¥–∞–≤–Ω..)/i.test(content);;
        const hasTokensKeyword = /\b(tokens?|coins?|crypto)\b/i.test(content) || /(—Ç–æ–∫–µ–Ω|—Ç–æ–∫–µ–Ω.|—Ç–æ–∫–µ–Ω..|–º–æ–Ω–µ—Ç..|–º–æ–Ω–µ—Ç.|–º–æ–Ω–µ—Ç)/i.test(content);;

        return hasLatestKeyword && hasTokensKeyword;
    }

    async handler(
        runtime: IAgentRuntime,
        message: Memory,
        _state?: State,
        _options: { [key: string]: unknown } = {},
        callback?: HandlerCallback
    ): Promise<boolean> {
        elizaLogger.log("Starting GET_LATEST_TOKENS handler...");

        try {
            const response = await fetch(
                "https://api.dexscreener.com/token-profiles/latest/v1",
                {
                    method: "GET",
                    headers: {
                        accept: "application/json",
                    },
                }
            );

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const tokens: TokenProfile[] = await response.json();

            const formattedOutput = tokens
                .map((token) => {
                    const [website, twitter, tg] = token.links
                    const description = token.description || "-";
                     return `${token.chainId}
                [üìú${token.tokenAddress}](${token.url})
                ${website?(`[üåê–°–∞–π—Ç](${website.url})`): ("")}${twitter?(`\n[üü¢X](${twitter.url})`): ("")}${tg?(`\n[üîµTelegram](${tg.url})`): ("")}   
                Description: ${description}

                `;
                })
                .join("");

            await createTokenMemory(runtime, message, formattedOutput);

            if (callback) {
                await callback({
                    text: formattedOutput,
                    action: this.name,
                });
            }

            return true;
        } catch (error) {
            elizaLogger.error("Error fetching latest tokens:", error);

            if (callback) {
                await callback({
                    text: `Failed to fetch latest tokens: ${error.message}`,
                    action: this.name,
                });
            }

            return false;
        }
    }

    examples = [
    [
      {
        user: "{{user1}}",
        content: {
          text: "–ø–æ–∫–∞–∂–∏ –º–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã"
        }
      },
      {
        user: "{{agent}}",
        content: {
          text: "Here are the latest tokens added to DexScreener...",
          action: "GET_LATEST_TOKENS"
        }
      }
    ],
    [
      {
        user: "{{user1}}",
        content: {
          text: "—Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"
        }
      },
      {
        user: "{{agent}}",
        content: {
          text: "Here are the latest tokens added to DexScreener...",
          action: "GET_LATEST_TOKENS"
        }
      }
    ],
    [
      {
        user: "{{user1}}",
        content: {
          text: "—Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤"
        }
      },
      {
        user: "{{agent}}",
        content: {
          text: "Here are the latest tokens added to DexScreener...",
          action: "GET_LATEST_TOKENS"
        }
      }
    ]
  ];
}

export const latestBoostedTemplate = `–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å –±—É—Å—Ç–æ–º. –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:

–°–∏—Ç—É–∞—Ü–∏—è 1: "–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã"
- –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç: —Å–ª–æ–≤–∞ –≤—Ä–æ–¥–µ "–ø–æ—Å–ª–µ–¥–Ω–∏–µ", "–Ω–æ–≤—ã–µ", "–±—É—Å—Ç—è—Ç","—Å–≤–µ–∂–∏–µ", "—Ç–æ–∫–µ–Ω—ã —Å –±—É—Å—Ç–æ–º" –ò "–±—É—Å—Ç —Ç–æ–∫–µ–Ω—ã"
- –ü—Ä–∏–º–µ—Ä: "–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã" –∏–ª–∏ "–ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –ø—Ä–æ–¥–≤–∏–≥–∞—é—Ç—Å—è?"
- –î–µ–π—Å—Ç–≤–∏–µ: GET_LATEST_BOOSTED_TOKENS

–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
{{conversation}}

–í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {{message}}
`;

export class LatestBoostedTokensAction implements Action {
    name = "GET_LATEST_BOOSTED_TOKENS";
    similes = [
        "FETCH_NEW_BOOSTED_TOKENS",
        "CHECK_RECENT_BOOSTED_TOKENS",
        "LIST_NEW_BOOSTED_TOKENS",
    ];
    description = "Get the latest boosted tokens from DexScreener API";
    suppressInitialMessage = true;
    template = latestBoostedTemplate;

    async validate(_runtime: IAgentRuntime, message: Memory): Promise<boolean> {
        const content =
            typeof message.content === "string"
                ? message.content
                : message.content?.text;

        if (!content) return false;

        const hasLatestKeyword = /\b(latest|new|recent)\b/i.test(content)|| /(–ø–æ—Å–ª–µ–¥–Ω..|–Ω–æ–≤..|–Ω–µ–¥–∞–≤–Ω..)/i.test(content);;
        const hasBoostedKeyword = /\b(boosted|promoted|featured)\b/i.test(content) || /(–±—É—Å—Ç|–±—É—Å—Ç..|–ø—Ä–æ–¥–≤–∏–≥–∞–µ–º..|–ø—Ä–æ–¥–≤–∏–∂–µ–Ω..)/i.test(content);;
        const hasTokensKeyword = /\b(tokens?|coins?|crypto)\b/i.test(content) || /(—Ç–æ–∫–µ–Ω|—Ç–æ–∫–µ–Ω.|—Ç–æ–∫–µ–Ω..|–º–æ–Ω–µ—Ç..|–º–æ–Ω–µ—Ç.|–º–æ–Ω–µ—Ç)/i.test(content);;

        return hasLatestKeyword && (hasBoostedKeyword || hasTokensKeyword);
    }

    async handler(
        runtime: IAgentRuntime,
        message: Memory,
        _state?: State,
        _options: { [key: string]: unknown } = {},
        callback?: HandlerCallback
    ): Promise<boolean> {
        elizaLogger.log("Starting GET_LATEST_BOOSTED_TOKENS handler...");

        try {
            const response = await fetch(
                "https://api.dexscreener.com/token-boosts/latest/v1",
                {
                    method: "GET",
                    headers: {
                        accept: "application/json",
                    },
                }
            );

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const tokens: TokenProfile[] = await response.json();

            const formattedOutput = tokens
                .map((token) => {
                           const description = token.description || "";
                    return ` ${token.chainId}\n [${token.tokenAddress}](${token.url}) \n Description: ${description}`;})
                .join("");

            await createTokenMemory(runtime, message, formattedOutput);

            if (callback) {
                await callback({
                    text: formattedOutput,
                    action: this.name,
                });
            }

            return true;
        } catch (error) {
            elizaLogger.error("Error fetching latest boosted tokens:", error);

            if (callback) {
                await callback({
                    text: `Failed to fetch latest boosted tokens: ${error.message}`,
                    action: this.name,
                });
            }

            return false;
        }
    }

    examples = [
    [
      {
        user: "{{user1}}",
        content: {
          text: "–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º"
        }
      },
      {
        user: "{{agent}}",
        content: {
          action: "GET_LATEST_BOOSTED_TOKENS"
        }
      }
    ],
    [
      {
        user: "{{user1}}",
        content: {
          text: "–Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å –±—É—Å—Ç–æ–º"
        }
      },
      {
        user: "{{agent}}",
        content: {
          action: "GET_LATEST_BOOSTED_TOKENS"
        }
      }
    ]
  ];
}

export const topBoostedTemplate = `–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Ç–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å –±—É—Å—Ç–æ–º. –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:

–°–∏—Ç—É–∞—Ü–∏—è 1: "–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ c –±—É—Å—Ç–æ–º"
- –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç: —Å–ª–æ–≤–∞ –≤—Ä–æ–¥–µ "–≤ —Ç–æ–ø–µ", "–ª–∏–¥—Ä—É—é—â–∏–µ", "—Ç–æ–ø", "–ª—É—á—à–∏–µ", "—Å–∞–º—ã–µ","–ø—Ä–æ–¥–≤–∏–≥–∞–µ–º—ã–µ" –ò "—Ç–æ–∫–µ–Ω—ã —Å –±—É—Å—Ç–æ–º"
- –ü—Ä–∏–º–µ—Ä: "–ü–æ–∫–∞–∂–∏ —Ç–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å –±—É—Å—Ç–æ–º", "–ª–∏–¥–∏—Ä—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã —Å –±—É—Å—Ç–æ–º" –∏–ª–∏ "–ö–∞–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –ø—Ä–æ–¥–≤–∏–≥–∞—é—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"
- –î–µ–π—Å—Ç–≤–∏–µ: GET_TOP_BOOSTED_TOKENS

–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
{{conversation}}

–í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {{message}}
`;

export class TopBoostedTokensAction implements Action {
    name = "GET_TOP_BOOSTED_TOKENS";
    similes = [
        "FETCH_MOST_BOOSTED_TOKENS",
        "CHECK_HIGHEST_BOOSTED_TOKENS",
        "LIST_TOP_BOOSTED_TOKENS",
    ];
    description = "Get tokens with most active boosts from DexScreener API";
    suppressInitialMessage = true;
    template = topBoostedTemplate;

    async validate(_runtime: IAgentRuntime, message: Memory): Promise<boolean> {
        const content =
            typeof message.content === "string"
                ? message.content
                : message.content?.text;

        if (!content) return false;

        const hasTopKeyword = /\b(top|best|most)\b/i.test(content)|| /(—Ç–æ–ø|—Ç–æ–ø.|—Ç–æ–ø–æ–≤—ã.)/i.test(content);;
        const hasBoostedKeyword = /\b(boosted|promoted|featured)\b/i.test(content) || /(–±—É—Å—Ç|–±—É—Å—Ç..|–ø—Ä–æ–¥–≤–∏–≥–∞–µ–º..|–ø—Ä–æ–¥–≤–∏–∂–µ–Ω..)/i.test(content);;
        const hasTokensKeyword = /\b(tokens?|coins?|crypto)\b/i.test(content)|| /(—Ç–æ–∫–µ–Ω|—Ç–æ–∫–µ–Ω.|—Ç–æ–∫–µ–Ω..|–º–æ–Ω–µ—Ç..|–º–æ–Ω–µ—Ç.|–º–æ–Ω–µ—Ç)/i.test(content);;

        return hasTopKeyword && (hasBoostedKeyword || hasTokensKeyword);
    }

    async handler(
        runtime: IAgentRuntime,
        message: Memory,
        _state?: State,
        _options: { [key: string]: unknown } = {},
        callback?: HandlerCallback
    ): Promise<boolean> {
        elizaLogger.log("Starting GET_TOP_BOOSTED_TOKENS handler...");

        try {
            const response = await fetch(
                "https://api.dexscreener.com/token-boosts/top/v1",
                {
                    method: "GET",
                    headers: {
                        accept: "application/json",
                    },
                }
            );

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const tokens: TokenProfile[] = await response.json();

            const formattedOutput = tokens
                .map((token) => {
                   const [website, twitter, tg] = token.links
        const description = token.description || "-";
        return `${token.chainId}
[üìú${token.tokenAddress}](${token.url})
${website?(`[üåê–°–∞–π—Ç](${website.url})`): ("")}${twitter?(`\n[üü¢X](${twitter.url})`): ("")}${tg?(`\n[üîµTelegram](${tg.url})`): ("")}   
Description: ${description}

`;})
                .join("");

            await createTokenMemory(runtime, message, formattedOutput);

            if (callback) {
                await callback({
                    text: formattedOutput,
                    action: this.name,
                });
            }

            return true;
        } catch (error) {
            elizaLogger.error("Error fetching top boosted tokens:", error);

            if (callback) {
                await callback({
                    text: `Failed to fetch top boosted tokens: ${error.message}`,
                    action: this.name,
                });
            }

            return false;
        }
    }

    examples = [
    [
      {
        user: "{{user1}}",
        content: {
          text: "–ø–æ–∫–∞–∂–∏ —Ç–æ–ø–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å –±—É—Å—Ç–æ–º"
        }
      },
      {
        user: "{{agent}}",
        content: {
          text: "Here are the tokens with the most active boosts on DexScreener...",
          action: "GET_TOP_BOOSTED_TOKENS"
        }
      }
    ],
    [
      {
        user: "{{user1}}",
        content: {
          text: "–ø–æ–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω—ã –≤ —Ç–æ–ø–µ —Å –±—É—Å—Ç–æ–º"
        }
      },
      {
        user: "{{agent}}",
        content: {
          text: "Here are the tokens with the most active boosts on DexScreener...",
          action: "GET_TOP_BOOSTED_TOKENS"
        }
      }
    ]
  ];
}

export const latestTokensAction = new LatestTokensAction();
export const latestBoostedTokensAction = new LatestBoostedTokensAction();
export const topBoostedTokensAction = new TopBoostedTokensAction();
